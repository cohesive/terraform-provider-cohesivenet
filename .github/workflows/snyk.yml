name: Snyk Security Scan

on:
  workflow_dispatch:

jobs:
  snyk_scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.ref }} 
          
      - name: Install curl if not installed
        run: |
          if ! command -v curl &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y curl
          else
            echo "curl is already installed."
          fi

      - name: Install jq (latest version)
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Install Snyk
        run: |
          curl -fsSL https://packages.snyk.io/debian/gpg | sudo tee /etc/apt/trusted.gpg.d/snyk.asc
          echo "deb https://packages.snyk.io/debian stable main" | sudo tee /etc/apt/sources.list.d/snyk.list
          sudo apt update
          sudo apt install snyk -y

      - name: Run Snyk Terraform Scan
        run: snyk test --iac --json > snyk-results-iac.json 
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Run Snyk Code Scan
        run: snyk code test --all-subdirectories --json > snyk-results-code.json
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Print Snyk Terraform Vulerabilities
        run: cat snyk-results-iac.json
        continue-on-error: true

      - name: Print Snyk Code Vulerabilities
        run: cat snyk-results-code.json
        continue-on-error: true

      - name: Send Terraform Results to Slack
        run: |
          REPO_NAME="${{ github.repository }}"
          BRANCH_NAME="${{ github.event.ref }}"
          
          if [ -f snyk-results-iac.json ]; then
            # Stream vulnerabilities and create slack message
            vulnerabilities=$(jq -c '[.vulnerabilities[]? | {
              title: .title,
              package: .packageName, 
              version: .version, 
              severity: .severity, 
              description: (.identifiers.CVE // ["N/A"]) | join(", ")
            }] | map("*\(.title) (\(.package) v\(.version))*\nSeverity: \(.severity)\nDescription: \(.description)\n") | join("\n----------------\n")' snyk-results-iac.json || echo "[]")
            echo "vul:$vulnerabilities"
            if [[ -n "$(echo "$vulnerabilities" | xargs)" ]] && [ "$vulnerabilities" != "[]" ]; then
              slack_message=$(jq -n --argjson vulnerabilities "$vulnerabilities" --arg repo "$REPO_NAME" --arg branch "$BRANCH_NAME" '{
                text: ("*Snyk detected Terraform vulnerabilities in \($repo) [\($branch)]*\n" + $vulnerabilities)
              }')
            else
              slack_message=$(jq -n --arg repo "$REPO_NAME" --arg branch "$BRANCH_NAME" '{
                text: ("✅ No Terraform vulnerabilities found in \($repo) [\($branch)].")
              }')
            fi
          else
            slack_message=$(jq -n --arg repo "$REPO_NAME" --arg branch "$BRANCH_NAME" '{
                text: ("✅ No Terraform vulnerabilities found in \($repo) [\($branch)]")
              }')
          fi
      
          # Send the Slack message
          curl -X POST -H "Content-type: application/json" --data "$slack_message" ${{ secrets.SECURITY_BOTS_SLACK_URL }}
        continue-on-error: true

      - name: Send Code Results to Slack
        run: |
          REPO_NAME="${{ github.repository }}"
          BRANCH_NAME="${{ github.event.ref }}"
      
          if [ -f snyk-results-code.json ] && ! grep -q "NoSupportedSastFiles" snyk-results-code.json; then
            vulnerabilities=$(jq -c '[.runs[].results[] | {
              ruleId: .ruleId,
              level: .level,
              message: .message.text,
              location: .locations[0].physicalLocation.artifactLocation.uri,
              line: .locations[0].physicalLocation.region.startLine
            }] | map("*\(.ruleId)*\nLevel: \(.level)\nMessage: \(.message)\nLocation: \(.location)\nLine: \(.line)*") | join("\n----------------\n")' snyk-results-code.json || echo "[]")
      
            if [[ -n "$(echo "$vulnerabilities" | xargs)" ]] && [ "$vulnerabilities" != "[]" ]; then
              slack_message=$(jq -n --argjson vulnerabilities "$vulnerabilities" --arg repo "$REPO_NAME" --arg branch "$BRANCH_NAME" '{
                text: ("*Snyk detected code vulnerabilities in \($repo) [\($branch)]*\n" + $vulnerabilities)
              }')
            else
              slack_message="✅ No code vulnerabilities found in *$REPO_NAME* [$BRANCH_NAME]."
            fi
          else
            slack_message=$(jq -n --arg repo "$REPO_NAME" --arg branch "$BRANCH_NAME" '{
                text: ("✅ No code vulnerabilities found in \($repo) [\($branch)]")
              }')
          fi
      
          # Send the Slack message
          curl -X POST -H "Content-type: application/json" --data "$slack_message" ${{ secrets.SECURITY_BOTS_SLACK_URL }}
        continue-on-error: true
